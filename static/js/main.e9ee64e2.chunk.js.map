{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","types/Errors.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","isSelectedPost","id","title","type","classNames","onClick","undefined","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Errors","client","getPostComments","postId","a","deleteComment","commentId","addComment","comment","Loader","NewCommentForm","comments","setComments","setError","React","useState","isLoading","setIsLoading","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","setBody","bodyError","setBodyError","action","onSubmit","event","preventDefault","trim","commentToAdd","result","catch","AddComment","finally","htmlFor","placeholder","value","onChange","target","PostDetails","None","error","isAdding","setIsAdding","useEffect","Common","length","href","prevComments","prevState","filter","item","DeleteComment","removeComment","UserSelector","users","selectedUser","setSelectedUser","isMenuOpen","setIsMenuOpen","userSelector","useRef","handleOnBlur","current","contains","document","addEventListener","removeEventListener","ref","role","user","getUsers","getUserPosts","userId","App","setUsers","setPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e9ee64e2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | undefined,\n  selectedPost: Post | undefined,\n  setSelectedPost(post: Post | undefined): void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPost, setSelectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map((post) => {\n          const isSelectedPost = post.id === selectedPost?.id;\n\n          return (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': !isSelectedPost },\n                  )}\n                  onClick={() => {\n                    setSelectedPost(!isSelectedPost ? post : undefined);\n                  }}\n                >\n                  {!isSelectedPost ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","/* eslint-disable  @typescript-eslint/no-explicit-any */\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Errors {\n  None,\n  Common = 'Something went wrong!',\n  DeleteComment = 'Unable to delete a comment',\n  AddComment = 'Unable to add a comment',\n}\n","/* eslint-disable @typescript-eslint/return-await */\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = async (postId: number) => {\n  return await client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = async (comment: Comment) => {\n  return await client.post<Comment>('/comments', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | undefined,\n  comments: Comment[] | undefined,\n  setComments(comments: Comment[]): void,\n  setError(error: Errors): void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  setComments,\n  setError,\n}) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [nameError, setNameError] = React.useState(false);\n  const [email, setEmail] = React.useState('');\n  const [emailError, setEmailError] = React.useState(false);\n  const [body, setBody] = React.useState('');\n  const [bodyError, setBodyError] = React.useState(false);\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      if (!name.trim()) {\n        setNameError(true);\n      }\n\n      if (!email.trim()) {\n        setEmailError(true);\n      }\n\n      if (!body.trim()) {\n        setBodyError(true);\n      }\n\n      return;\n    }\n\n    if (selectedPost) {\n      const commentToAdd: Comment = {\n        id: 0,\n        postId: selectedPost.id,\n        name,\n        email,\n        body,\n      };\n\n      setIsLoading(true);\n\n      addComment(commentToAdd)\n        .then(result => {\n          setComments(comments ? [...comments, result] : [result]);\n        })\n        .catch(() => setError(Errors.AddComment))\n        .finally(() => setIsLoading(false));\n\n      setBody('');\n    }\n  };\n\n  const clearFields = () => {\n    setName('');\n    setNameError(false);\n    setEmail('');\n    setEmailError(false);\n    setBody('');\n    setBodyError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      action=\"https://mate.academy/students-api\"\n      method=\"POST\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': bodyError },\n            )}\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n              setBodyError(false);\n            }}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => clearFields()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { getPostComments, deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | undefined,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = React.useState<Comment[]>();\n  const [error, setError] = useState(Errors.None);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isAdding, setIsAdding] = React.useState(false);\n\n  React.useEffect(() => {\n    setComments(undefined);\n    setIsAdding(false);\n\n    if (selectedPost) {\n      setIsLoading(true);\n      getPostComments(selectedPost.id)\n        .then(result => setComments(result))\n        .catch(() => setError(Errors.Common))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedPost]);\n\n  const removeComment = (comment: Comment) => {\n    const prevComments = comments;\n\n    setComments((prevState) => {\n      return prevState?.filter(item => item.id !== comment.id);\n    });\n\n    deleteComment(comment.id)\n      .catch(() => {\n        setError(Errors.DeleteComment);\n        setComments(prevComments);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error !== Errors.None && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {comments\n            && (comments.length === 0\n              ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )\n              : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => removeComment(comment)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              ))}\n\n          {(!isAdding && !isLoading && error === Errors.None) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsAdding(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isAdding && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            comments={comments}\n            setComments={setComments}\n            setError={setError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | undefined,\n  selectedUser: User | undefined,\n  setSelectedUser(user: User): void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, setSelectedUser,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n  const userSelector = React.useRef<HTMLDivElement>(null);\n\n  const handleOnBlur = (event: MouseEvent) => {\n    if (userSelector.current\n      && !userSelector.current.contains(event.target as HTMLElement)) {\n      setIsMenuOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleOnBlur);\n\n    return () => {\n      document.removeEventListener('click', handleOnBlur);\n    };\n  });\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isMenuOpen },\n      )}\n      ref={userSelector}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users?.map((user) => {\n            return (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': user.id === selectedUser?.id },\n                )}\n                onClick={() => {\n                  setSelectedUser(user);\n                  setIsMenuOpen(!isMenuOpen);\n                }}\n                key={user.id}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/return-await */\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = async () => {\n  return await client.get<User[]>('/users');\n};\n","/* eslint-disable @typescript-eslint/return-await */\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = async (userId: number) => {\n  return await client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Errors } from './types/Errors';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = React.useState<User[]>();\n  const [selectedUser, setSelectedUser] = React.useState<User>();\n  const [posts, setPosts] = React.useState<Post[]>();\n  const [selectedPost, setSelectedPost] = React.useState<Post>();\n  const [error, setError] = React.useState(Errors.None);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result))\n      .catch(() => setError(Errors.Common));\n  }, []);\n\n  React.useEffect(() => {\n    setSelectedPost(undefined);\n    setPosts(undefined);\n\n    if (selectedUser) {\n      setIsLoading(true);\n      getUserPosts(selectedUser.id)\n        .then(result => setPosts(result))\n        .catch(() => setError(Errors.Common))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {error !== Errors.None && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {posts\n                  && (posts.length === 0\n                    ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )\n                    : (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}